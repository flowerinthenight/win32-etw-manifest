//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------




namespace JyTrace
{
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Diagnostics.Eventing;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Security.Principal;

    public class ProviderJyTrace : IDisposable
    {
        //
        // Provider JyTrace Event Count 25
        //

        internal EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("277c604b-1962-47fa-9307-7ce0855dfea6"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        protected EventDescriptor FunctionEntry;
        protected EventDescriptor FunctionExit;
        protected EventDescriptor InfoW;
        protected EventDescriptor ErrorW;
        protected EventDescriptor InfoA;
        protected EventDescriptor ErrorA;
        protected EventDescriptor WideStrInfo;
        protected EventDescriptor WideStrError;
        protected EventDescriptor AnsiStrInfo;
        protected EventDescriptor AnsiStrError;
        protected EventDescriptor HresultError;
        protected EventDescriptor LastError;
        protected EventDescriptor PointerInfo;
        protected EventDescriptor PointerError;
        protected EventDescriptor NumberInfo;
        protected EventDescriptor NumberError;
        protected EventDescriptor HexInfo;
        protected EventDescriptor HexError;
        protected EventDescriptor BoolInfo;
        protected EventDescriptor BoolError;
        protected EventDescriptor GuidInfo;
        protected EventDescriptor GuidError;
        protected EventDescriptor FloatInfo;
        protected EventDescriptor FloatError;
        protected EventDescriptor Simple;

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                m_provider.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }


        public ProviderJyTrace()
        {
            unchecked
            {
                FunctionEntry = new EventDescriptor(0x65, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x1);
                FunctionExit = new EventDescriptor(0x66, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x1);
                InfoW = new EventDescriptor(0x67, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                ErrorW = new EventDescriptor(0x68, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                InfoA = new EventDescriptor(0x69, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                ErrorA = new EventDescriptor(0x6a, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                WideStrInfo = new EventDescriptor(0x6b, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                WideStrError = new EventDescriptor(0x6c, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                AnsiStrInfo = new EventDescriptor(0x6d, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                AnsiStrError = new EventDescriptor(0x6e, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                HresultError = new EventDescriptor(0x6f, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                LastError = new EventDescriptor(0x70, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                PointerInfo = new EventDescriptor(0x71, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                PointerError = new EventDescriptor(0x72, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                NumberInfo = new EventDescriptor(0x73, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                NumberError = new EventDescriptor(0x74, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                HexInfo = new EventDescriptor(0x75, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                HexError = new EventDescriptor(0x76, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                BoolInfo = new EventDescriptor(0x77, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                BoolError = new EventDescriptor(0x78, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                GuidInfo = new EventDescriptor(0x79, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                GuidError = new EventDescriptor(0x7a, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                FloatInfo = new EventDescriptor(0x7b, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
                FloatError = new EventDescriptor(0x7c, 0x0, 0x0, 0x2, 0x0, 0x0, (long)0x2);
                Simple = new EventDescriptor(0x7d, 0x0, 0x0, 0x5, 0x0, 0x0, (long)0x2);
            }
        }


        //
        // Event method for FunctionEntry
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for FunctionExit
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for InfoW
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for ErrorW
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for InfoA
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for ErrorA
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for WideStrInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for WideStrError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for AnsiStrInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for AnsiStrError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for HresultError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for LastError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for PointerInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for PointerError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for NumberInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for NumberError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for HexInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for HexError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for BoolInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for BoolError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for GuidInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for GuidError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for FloatInfo
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for FloatError
        //
        //
        // The event's template has types not supported in c# generation
        //

        //
        // Event method for Simple
        //
        public bool EventWriteSimple(string Module, string File, string Function, string Key, string Value)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateTemplateNetSimple(ref Simple, Module, File, Function, Key, Value);
        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}


        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }



        internal unsafe bool TemplateTemplateNetSimple(
            ref EventDescriptor eventDescriptor,
            string Module,
            string File,
            string Function,
            string Key,
            string Value
            )
        {
            int argumentCount = 5;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Module.Length + 1)*sizeof(char);

                userDataPtr[1].Size = (uint)(File.Length + 1)*sizeof(char);

                userDataPtr[2].Size = (uint)(Function.Length + 1)*sizeof(char);

                userDataPtr[3].Size = (uint)(Key.Length + 1)*sizeof(char);

                userDataPtr[4].Size = (uint)(Value.Length + 1)*sizeof(char);

                fixed (char* a0 = Module, a1 = File, a2 = Function, a3 = Key, a4 = Value)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    userDataPtr[1].DataPointer = (ulong)a1;
                    userDataPtr[2].DataPointer = (ulong)a2;
                    userDataPtr[3].DataPointer = (ulong)a3;
                    userDataPtr[4].DataPointer = (ulong)a4;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }

    }

}
